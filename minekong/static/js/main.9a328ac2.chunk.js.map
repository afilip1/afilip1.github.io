{"version":3,"sources":["util.ts","hooks/game.ts","hooks/grid.ts","components/board/cell.tsx","components/board/actionpill.tsx","components/board/board.tsx","theme.ts","components/sidepanel/themetoggle.tsx","components/sidepanel/header.tsx","components/sidepanel/status.tsx","components/sidepanel/settings/labeledinput.tsx","components/sidepanel/settings/preset.tsx","components/sidepanel/settings/settings.tsx","components/sidepanel/info.tsx","components/app.tsx","hooks/localstorage.ts","index.tsx"],"names":["Array","prototype","equals","other","this","length","every","element","index","shuffle","i","j","Math","floor","random","zip","map","e","withIndex","from","entries","countBy","predicate","filter","GameState","useGame","initSize","initMineCount","useState","gridSize","setGridSize","getNeighbors","useCallback","cellIndex","x","y","useGrid","mineCount","setMineCount","firstClick","setFirstClick","mines","setMines","adjacent","setAdjacent","fill","revealed","setRevealed","flagged","setFlagged","dimmed","setDimmed","lastRevealed","setLastRevealed","populateBoard","firstClickedCell","splice","cell","n","getGameState","emptyCells","isMine","Won","some","isRevealed","Lost","InProgress","revealCascade","nextRevealed","slice","queue","forEach","center","shift","highlighted","concat","nextDimmed","h","unrevealed","u","push","tryRevealCell","revealAllMines","nextFlagged","revealCell","board","resetBoard","size","tryFlagCell","tryRevealUnflaggedNeighbors","neighbors","unflaggedNeighbors","highlightCells","unhighlightCells","StyledCellOuter","styled","div","StyledCellInner","theme","primary","primaryDark","props","secondary","secondaryDark","tertiary","tertiaryDark","Cell","onPointerUp","children","ActionPillOuter","above","ActionButton","color","ActionPill","onFlag","onReveal","useContext","ThemeContext","StyledBoard","separator","BoardGrid","EdgeShadow","background","Board","start","end","boardState","handlers","pillCell","setPillCell","closePill","cells","v","k","id","isPillOpen","mine","adjacentCount","isLastRevealed","key","pointerType","button","onLeftClick","onRightClick","openPill","style","display","lightTheme","light","foreground","themeToggle","themeToggleIcon","darkTheme","ThemeToggle","attrs","height","Title","h1","StyledHeader","header","Header","onThemeToggle","href","onClick","StyledStatus","h2","Status","status","gameState","minesLeft","StyledInput","input","LabeledNumericInput","label","value","onChange","type","currentTarget","StyledPreset","Preset","onSelectPreset","StyledSettings","SettingsGrid","columns","RestartButton","Settings","handleSelectPreset","newGridSize","newMineCount","onSettingsUpdate","onSubmit","preventDefault","StyledInfo","Info","GlobalStyle","createGlobalStyle","StyledApp","App","initValue","stored","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","useLocalStorage","useDarkTheme","setDarkTheme","onContextMenu","onMouseUp","onMouseDown","buttons","Boolean","onMiddleOver","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a328ac2.chunk.js","sourcesContent":["/* eslint no-extend-native: [\"error\", { \"exceptions\": [\"Array\"]}] */\r\ndeclare global {\r\n   interface Array<T> {\r\n      equals(other: T[]): boolean\r\n      shuffle(): T[]\r\n      zip<U>(other: U[]): [T, U][]\r\n      withIndex(): [number, T][]\r\n      countBy(predicate: (value: T) => boolean): number\r\n   }\r\n}\r\n\r\n// unbelievable that I have to write this\r\nArray.prototype.equals = function <T>(this: T[], other: T[]) {\r\n   return (this.length === other.length) && this.every((element, index) => element === other[index]);\r\n}\r\n\r\nArray.prototype.shuffle = function <T>(this: T[]) {\r\n   for (let i = this.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [this[i], this[j]] = [this[j], this[i]];\r\n   }\r\n   return this;\r\n}\r\n\r\nArray.prototype.zip = function <T, U>(this: T[], other: U[]) {\r\n   return this.map((e, i) => [e, other[i]]);\r\n}\r\n\r\nArray.prototype.withIndex = function <T>(this: T[]) {\r\n   return Array.from(this.entries());\r\n}\r\n\r\nArray.prototype.countBy = function <T>(this: T[], predicate: (item: T) => boolean) {\r\n   return this.filter(predicate).length;\r\n}\r\n\r\nconst range = function (start: number, end: number) {\r\n   return Array.from({ length: end - start }, (v, k) => k + start);\r\n}\r\n\r\nexport { range };","import { useState, useCallback } from \"react\";\r\nimport { useGrid } from \"src/hooks/grid\"\r\n\r\nexport type BoardState = {\r\n   mines: boolean[]\r\n   revealed: boolean[]\r\n   flagged: boolean[]\r\n   adjacent: (number | null)[]\r\n   dimmed: boolean[]\r\n   lastRevealed: number | null\r\n}\r\n\r\nexport enum GameState {\r\n   InProgress,\r\n   Won,\r\n   Lost,\r\n}\r\n\r\ntype InitBoardParams = {\r\n   initSize: number,\r\n   initMineCount: number,\r\n};\r\n\r\nexport function useGame({ initSize, initMineCount }: InitBoardParams) {\r\n   const { gridSize, setGridSize, getNeighbors } = useGrid(initSize);\r\n\r\n   const [mineCount, setMineCount] = useState(initMineCount);\r\n\r\n   const [firstClick, setFirstClick] = useState<number | null>(null);\r\n\r\n   const [mines, setMines] = useState<boolean[]>([]);\r\n   const [adjacent, setAdjacent] = useState<(number | null)[]>([]);\r\n   const [revealed, setRevealed] = useState(Array(gridSize * gridSize).fill(false));\r\n   const [flagged, setFlagged] = useState(Array(gridSize * gridSize).fill(false));\r\n   const [dimmed, setDimmed] = useState(Array(gridSize * gridSize).fill(false));\r\n   const [lastRevealed, setLastRevealed] = useState<number | null>(null);\r\n\r\n   const resetBoard = (size: number, mineCount: number) => {\r\n      setGridSize(size);\r\n      setMineCount(mineCount);\r\n\r\n      setMines([]);\r\n      setAdjacent([]);\r\n      setRevealed(Array(size * size).fill(false));\r\n      setFlagged(Array(size * size).fill(false));\r\n      setDimmed(Array(size * size).fill(false));\r\n      setLastRevealed(null);\r\n   }\r\n\r\n   const populateBoard = useCallback((firstClickedCell: number) => {\r\n      const mines = Array((gridSize * gridSize) - 1)\r\n         .fill(true, 0, mineCount)\r\n         .fill(false, mineCount)\r\n         .shuffle();\r\n\r\n      mines.splice(firstClickedCell, 0, false); // make sure first clicked cell is never a mine\r\n\r\n      const adjacent = mines.withIndex().map(([cell, mine]) =>\r\n         mine\r\n            ? null\r\n            : getNeighbors(cell).countBy((n) => mines[n])\r\n      );\r\n\r\n      setMines(mines);\r\n      setAdjacent(adjacent);\r\n   }, [gridSize, mineCount, getNeighbors]);\r\n\r\n   const getGameState = useCallback(() => {\r\n      const emptyCells = mines.map(isMine => !isMine);\r\n\r\n      if (revealed.equals(emptyCells)) {\r\n         return GameState.Won;\r\n      }\r\n\r\n      const mineRevealed = revealed.zip(mines).some(([isRevealed, isMine]) => isRevealed && isMine)\r\n      if (mineRevealed) {\r\n         return GameState.Lost;\r\n      }\r\n\r\n      return GameState.InProgress;\r\n   }, [mines, revealed]);\r\n\r\n   const revealCascade = useCallback((...queue: number[]) => {\r\n      let nextRevealed = revealed.slice()\r\n      queue.forEach(cell => nextRevealed[cell] = true);\r\n\r\n      while (queue.length > 0) {\r\n         const center = queue.shift() as number;\r\n\r\n         if (mines[center]) {\r\n            nextRevealed[center] = true;\r\n\r\n            const highlighted = getNeighbors(center).concat(center);\r\n\r\n            let nextDimmed = Array(gridSize * gridSize).fill(true);\r\n            highlighted.forEach(h => nextDimmed[h] = false);\r\n\r\n            setDimmed(nextDimmed);\r\n         }\r\n\r\n         if (adjacent[center] === 0) {\r\n            const unrevealed = getNeighbors(center).filter(n => !nextRevealed[n]);\r\n            unrevealed.forEach(u => nextRevealed[u] = true);\r\n            queue.push(...unrevealed);\r\n         }\r\n      }\r\n\r\n      return nextRevealed;\r\n   }, [adjacent, getNeighbors, gridSize, mines, revealed]);\r\n\r\n   const tryRevealCell = useCallback((cell: number) => {\r\n      if (getGameState() !== GameState.InProgress) return;\r\n\r\n      if (mines.length === 0) {\r\n         populateBoard(cell);\r\n         setFirstClick(cell);\r\n         return;\r\n      }\r\n\r\n      const revealAllMines = (cell: number) => {\r\n         const nextRevealed = revealed\r\n            .zip(mines)\r\n            .map(([isRevealed, isMine]) => isRevealed || isMine);\r\n\r\n         setRevealed(nextRevealed);\r\n\r\n         const highlighted = getNeighbors(cell).concat(cell);\r\n\r\n         let nextDimmed = Array(gridSize * gridSize).fill(true);\r\n         highlighted.forEach(h => nextDimmed[h] = false);\r\n\r\n         setDimmed(nextDimmed);\r\n      }\r\n\r\n      const revealCell = (cell: number) => {\r\n         const nextRevealed = revealCascade(cell);\r\n         const nextFlagged = flagged.slice();\r\n\r\n         nextFlagged[cell] = false;\r\n\r\n         setRevealed(nextRevealed);\r\n         setFlagged(nextFlagged);\r\n      }\r\n\r\n      if (flagged[cell]) return;\r\n\r\n      if (mines[cell]) {\r\n         revealAllMines(cell);\r\n      } else {\r\n         revealCell(cell);\r\n      }\r\n\r\n      setLastRevealed(cell);\r\n   }, [gridSize, mines, revealed, flagged, getGameState, getNeighbors, populateBoard, revealCascade]);\r\n\r\n   const tryRevealUnflaggedNeighbors = (cell: number) => {\r\n      const neighbors = getNeighbors(cell);\r\n\r\n      const adjacentFlags = neighbors.filter(n => flagged[n])\r\n      if (adjacentFlags.length !== adjacent[cell]) return;\r\n\r\n      const unflaggedNeighbors = neighbors.filter(n => !(revealed[n] || flagged[n]));\r\n\r\n      setRevealed(revealCascade(...unflaggedNeighbors));\r\n   }\r\n\r\n   if (firstClick !== null) {\r\n      tryRevealCell(firstClick);\r\n      setFirstClick(null);\r\n   }\r\n\r\n   const tryFlagCell = (cell: number) => {\r\n      if (getGameState() !== GameState.InProgress) return;\r\n\r\n      if (revealed[cell]) return;\r\n\r\n      let nextFlagged = flagged.slice();\r\n      nextFlagged[cell] = !nextFlagged[cell];\r\n\r\n      setFlagged(nextFlagged);\r\n   }\r\n\r\n   const highlightCells = (cell: number) => {\r\n      const highlighted = getNeighbors(cell).concat(cell);\r\n\r\n      let nextDimmed = Array(gridSize * gridSize).fill(true);\r\n      highlighted.forEach(h => nextDimmed[h] = false);\r\n\r\n      setDimmed(nextDimmed);\r\n   }\r\n\r\n   const unhighlightCells = () => {\r\n      setDimmed(Array(gridSize * gridSize).fill(false));\r\n   }\r\n\r\n   return {\r\n      gridSize,\r\n      mineCount,\r\n      setMineCount,\r\n      board: { mines, revealed, flagged, adjacent, dimmed, lastRevealed },\r\n      resetBoard,\r\n      tryRevealCell,\r\n      tryFlagCell,\r\n      tryRevealUnflaggedNeighbors,\r\n      highlightCells,\r\n      unhighlightCells,\r\n      getGameState,\r\n   };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\n\r\nexport function useGrid(initSize: number) {\r\n   const [gridSize, setGridSize] = useState(initSize);\r\n\r\n   const getNeighbors: (cellIndex: number) => number[] =\r\n      useCallback((cellIndex) => {\r\n         const indexToCoords: (index: number) => [number, number] =\r\n            index => [index % gridSize, Math.floor(index / gridSize)];\r\n\r\n         const coordsToIndex: ([x, y]: [number, number]) => number =\r\n            ([x, y]) => y * gridSize + x;\r\n\r\n         const isInBounds = ([x, y]: [number, number]) =>\r\n            x >= 0 && x < gridSize && y >= 0 && y < gridSize;\r\n\r\n         const [x, y] = indexToCoords(cellIndex);\r\n         const neighbors: [number, number][] = [\r\n            [x - 1, y - 1], [x, y - 1], [x + 1, y - 1],\r\n            [x - 1, y], /* ~center point~ */[x + 1, y],\r\n            [x - 1, y + 1], [x, y + 1], [x + 1, y + 1],\r\n         ];\r\n\r\n         return neighbors\r\n            .filter(isInBounds)\r\n            .map(coordsToIndex);\r\n      }, [gridSize]);\r\n\r\n   return {\r\n      gridSize,\r\n      setGridSize,\r\n      getNeighbors\r\n   };\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledCellOuter = styled.div`\r\n   position: relative;\r\n\r\n   display: flex;\r\n\r\n   box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.1);\r\n   border: 1px solid white;\r\n`;\r\n\r\nconst StyledCellInner = styled.div<{ dimmed: boolean, revealed: boolean, flagged: boolean }>`\r\n   flex: 1;\r\n\r\n   display: flex;\r\n   align-items: center;\r\n   justify-content: center;\r\n\r\n   box-sizing: border-box;\r\n   \r\n   color: white;\r\n   font-size: 1.15rem;\r\n   font-weight: 900;\r\n   \r\n   background: ${({ theme }) => theme.primary};\r\n   border: 5px solid ${({ theme }) => theme.primaryDark};\r\n\r\n   ${props => props.dimmed && `\r\n      filter: brightness(0.8) opacity(0.7) blur(1px) saturate(0.5);\r\n      border: 1px solid darkgray;\r\n   `}\r\n   \r\n   ${props => props.flagged && `  \r\n      background: ${props.theme.secondary};\r\n      border-color: ${props.theme.secondaryDark};\r\n   `}\r\n\r\n   ${props => props.revealed && `\r\n      background: ${props.theme.tertiary};\r\n      border-color: ${props.theme.tertiaryDark};\r\n   `}\r\n`;\r\n\r\nexport type CellHandlers = {\r\n   onLeftClick: (i: number) => void\r\n   onRightClick: (e: React.MouseEvent, i: number) => void\r\n   onMiddleOver: (e: React.MouseEvent, i: number) => void\r\n}\r\n\r\ntype CellProps = {\r\n   dimmed: boolean\r\n   revealed: boolean\r\n   flagged: boolean\r\n\r\n   onPointerUp: (e: React.PointerEvent) => void\r\n\r\n   children: React.ReactNode\r\n}\r\n\r\nexport function Cell({ dimmed, revealed, flagged, onPointerUp, children }: CellProps) {\r\n   return (\r\n      <StyledCellOuter\r\n         onPointerUp={onPointerUp}\r\n      >\r\n         <StyledCellInner\r\n            dimmed={dimmed}\r\n            revealed={revealed}\r\n            flagged={flagged}\r\n         >\r\n            {children}\r\n         </StyledCellInner>\r\n      </StyledCellOuter>\r\n   );\r\n}","import React, { useContext } from \"react\";\r\nimport styled, { ThemeContext } from \"styled-components\";\r\n\r\nconst ActionPillOuter = styled.div<{ above: boolean }>`\r\n   position: absolute;\r\n\r\n   display: flex;\r\n   align-items: center;\r\n   justify-content: center;\r\n\r\n   width: 90px;\r\n   height: 45px;\r\n\r\n   ${props => props.above ? \"bottom: 100%;\" : \"top: 100%;\"}\r\n\r\n   box-shadow: 3px 3px 3px rgba(0,0,0,0.2);\r\n\r\n   border: 2px solid white;\r\n   border-radius: 10px;\r\n\r\n   z-index: 1;\r\n\r\n   // arrow\r\n   &::after {\r\n      content: '';\r\n      position: absolute;\r\n      border-width: 7px;\r\n      border-style: solid;\r\n      \r\n      ${props => props.above\r\n      ? `top: 100%;\r\n      border-color: white transparent transparent transparent;`\r\n      : `bottom: 100%;\r\n      border-color: transparent transparent white transparent;`\r\n   }\r\n   }\r\n\r\n   *:first-child {\r\n      border-top-left-radius: 8px;\r\n      border-bottom-left-radius: 8px;\r\n   }\r\n\r\n   *:last-child {\r\n      border-top-right-radius: 8px;\r\n      border-bottom-right-radius: 8px;\r\n   }\r\n`;\r\n\r\nconst ActionButton = styled.div`\r\n   flex: 1;\r\n   background-color: ${props => props.color};\r\n   height: 100%;\r\n`;\r\n\r\ntype ActionPillProps = {\r\n   above: boolean\r\n   onReveal: () => void\r\n   onFlag: (e: React.MouseEvent) => void\r\n}\r\n\r\nexport const ActionPill = ({ above, onFlag, onReveal }: ActionPillProps) => {\r\n   const theme = useContext(ThemeContext);\r\n\r\n   return (\r\n      <ActionPillOuter above={above}>\r\n         <ActionButton onPointerUp={onFlag} color={theme.secondary} />\r\n         <ActionButton onPointerUp={onReveal} color={theme.tertiary} />\r\n      </ActionPillOuter>\r\n   );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { BoardState } from \"src/hooks/game\";\r\nimport { Cell, CellHandlers } from \"./cell\";\r\nimport { range } from \"src/util\";\r\nimport styled from \"styled-components\";\r\nimport { ActionPill } from \"./actionpill\";\r\n\r\nconst StyledBoard = styled.div`\r\n   grid-area: board;\r\n   \r\n   overflow: auto;\r\n   padding: 10px 30px;\r\n\r\n   overscroll-behavior: none;\r\n\r\n   z-index: 1;\r\n\r\n   @media screen and (min-width: 768px) {\r\n      padding: 30px;\r\n\r\n      border-left: 1px solid ${({ theme }) => theme.separator};\r\n      transition: border 0.3s linear;\r\n   }\r\n`;\r\n\r\nconst BoardGrid = styled.div<{ gridSize: number }>`\r\n   --cell-size: 40px;\r\n\r\n   display: grid;\r\n   grid-template-columns: repeat(${props => props.gridSize}, var(--cell-size));\r\n   grid-auto-rows: var(--cell-size);\r\n   gap: 4px;\r\n`;\r\n\r\nconst EdgeShadow = styled.div`\r\n   position: relative;\r\n   grid-area: board;\r\n\r\n   @media screen and (min-width: 768px) {\r\n      display: none;\r\n   }\r\n\r\n   box-shadow: inset 0 0 5px ${({ theme }) => theme.background};\r\n   pointer-events: none;\r\n\r\n   transition: box-shadow 0.3s linear;\r\n   z-index: 2;\r\n`;\r\n\r\ntype BoardProps = {\r\n   gridSize: number\r\n   boardState: BoardState\r\n} & CellHandlers\r\n\r\nexport function Board({ gridSize, boardState, ...handlers }: BoardProps) {\r\n   const [pillCell, setPillCell] = useState<number | null>(null);\r\n   const openPill = (id: number) => setPillCell(id);\r\n   const closePill = () => setPillCell(null);\r\n\r\n   const cellIds = range(0, boardState.revealed.length);\r\n   const cells = cellIds.map(id => {\r\n      const isPillOpen = pillCell === id;\r\n      const revealed = boardState.revealed[id];\r\n      const dimmed = boardState.dimmed[id];\r\n      const flagged = boardState.flagged[id];\r\n      const mine = boardState.mines[id];\r\n      const adjacentCount = boardState.adjacent[id] as number;\r\n      const isLastRevealed = boardState.lastRevealed === id;\r\n\r\n      const handlePointerUp = (e: React.PointerEvent) => {\r\n         switch (e.pointerType) {\r\n            case \"mouse\":\r\n               switch (e.button) {\r\n                  case 0:\r\n                     handlers.onLeftClick(id);\r\n                     break;\r\n                  case 2:\r\n                     handlers.onRightClick(e, id);\r\n                     break;\r\n               }\r\n               break;\r\n            case \"touch\":\r\n               if (revealed && e.button === 0) {\r\n                  handlers.onLeftClick(id);\r\n                  closePill();\r\n               } else {\r\n                  isPillOpen ? closePill() : openPill(id);\r\n               }\r\n               break;\r\n         }\r\n      }\r\n\r\n      return (\r\n         <Cell\r\n            key={id}\r\n            {...{ dimmed, flagged, revealed, mine, adjacentCount, isLastRevealed }}\r\n            onPointerUp={handlePointerUp}\r\n         >\r\n            {revealed && (mine\r\n               ? (isLastRevealed ? \"💥\" : \"💣\")\r\n               : (adjacentCount > 0 && adjacentCount))}\r\n\r\n            {isPillOpen &&\r\n               <ActionPill\r\n                  above={id > (gridSize - 1)}\r\n                  onReveal={() => handlers.onLeftClick(id)}\r\n                  onFlag={(e) => handlers.onRightClick(e, id)} />\r\n            }\r\n         </Cell>\r\n      );\r\n   });\r\n\r\n   return (\r\n      <>\r\n         <StyledBoard>\r\n            <div style={{ display: \"inline-block\" }}>\r\n               <BoardGrid gridSize={gridSize}>\r\n                  {cells}\r\n               </BoardGrid>\r\n            </div>\r\n         </StyledBoard>\r\n         <EdgeShadow />\r\n      </>\r\n   );\r\n}","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const lightTheme: DefaultTheme = {\r\n   light: true,\r\n   \r\n   foreground: \"black\",\r\n   background: \"white\",\r\n   separator: \"#eee\",\r\n\r\n   primary: \"#ffaf2a\",\r\n   primaryDark: \"#fd9f00\",\r\n   secondary: \"#06a4ed\",\r\n   secondaryDark: \"#149dd7\",\r\n   tertiary: \"#3f3d40\",\r\n   tertiaryDark: \"#2a2d32\",\r\n\r\n   themeToggle: \"#ffaf2a\",\r\n   themeToggleIcon: \"url('/img/sun.png')\",\r\n}\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n   ...lightTheme,\r\n   \r\n   light: false,\r\n\r\n   foreground: \"white\",\r\n   background: \"black\",\r\n   separator: \"#222\",\r\n\r\n   themeToggle: \"#06a4ed\",\r\n   themeToggleIcon: \"url('/img/moon.png')\"\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const ThemeToggle = styled.div.attrs({\r\n   height: 20,\r\n   children: <div />\r\n})`\r\n   width: ${props => props.height * 2}px;\r\n   height: ${props => props.height}px;\r\n   \r\n   border-radius: ${props => props.height / 2}px;\r\n\r\n   background-color: ${({ theme }) => theme.themeToggle};\r\n\r\n   transition: color 0.3s ease;\r\n   box-shadow: inset 0 3px 3px rgba(0,0,0,0.2);\r\n\r\n   div {\r\n      position: relative;\r\n\r\n      width: ${props => props.height * 1.4}px;\r\n      height: ${props => props.height * 1.4}px;\r\n\r\n      top: ${props => -props.height / 5}px;\r\n      left: ${props => props.theme.light\r\n      ? (-props.height / 5)\r\n      : (props.height - (props.height / 5))}px;\r\n      \r\n      background: ${({ theme }) => theme.themeToggleIcon};\r\n\r\n      background-size: ${props => props.height * 1.4}px;\r\n\r\n      transition: left 0.3s ease;\r\n   }\r\n`;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { ThemeToggle } from \"./themetoggle\";\r\n\r\nconst Title = styled.h1`\r\n   font-weight: 900;\r\n   margin: 0;\r\n   text-transform: uppercase;\r\n`;\r\n\r\nconst StyledHeader = styled.header`\r\n   grid-area: header;\r\n\r\n   display: flex;\r\n\r\n   justify-content: space-between;\r\n   align-items: center;\r\n   \r\n   padding: 0 30px;\r\n`;\r\n\r\ntype HeaderProps = {\r\n   onThemeToggle: () => void\r\n}\r\n\r\nexport function Header({ onThemeToggle }: HeaderProps) {\r\n   return (\r\n      <StyledHeader>\r\n         <div>\r\n            <Title>Minekong</Title>\r\n            <small>\r\n               inspired by <a href=\"https://store.steampowered.com/app/265890/Hexcells/\">Hexcells</a>\r\n            </small>\r\n         </div>\r\n\r\n         <ThemeToggle onClick={onThemeToggle} />\r\n      </StyledHeader>\r\n   );\r\n}","import React from \"react\";\r\nimport { GameState } from \"src/hooks/game\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledStatus = styled.h2`\r\n   grid-area: status;\r\n\r\n   padding: 0 30px;\r\n   margin-top: 10px;\r\n`;\r\n\r\nexport type StatusProps = {\r\n   gameState: GameState\r\n   minesLeft: number\r\n}\r\n\r\nexport function Status({ gameState, minesLeft }: StatusProps) {\r\n   let status;\r\n   switch (gameState) {\r\n      case GameState.InProgress:\r\n         status = \"Flags left: \" + minesLeft;\r\n         break;\r\n      case GameState.Won:\r\n         status = \"You won!\"\r\n         break;\r\n      case GameState.Lost:\r\n         status = \"You lost :(\"\r\n         break;\r\n   }\r\n\r\n   return <StyledStatus>{status}</StyledStatus>;\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledInput = styled.input`\r\n   width: 100%;\r\n   font-size: 1.5rem;\r\n   border: none;\r\n   border-bottom: 3px solid ${({theme}) => theme.secondary};\r\n   outline: none;\r\n`;\r\n\r\ntype LabeledNumericInputProps = {\r\n   label: string\r\n   value: number\r\n   onChange: (value: number) => void\r\n}\r\n\r\nexport function LabeledNumericInput({ label, value, onChange }: LabeledNumericInputProps) {\r\n   const onInputChange = (e: React.FormEvent<HTMLInputElement>) =>\r\n      onChange(+e.currentTarget.value);\r\n\r\n   return (\r\n      <label>\r\n         {label}\r\n         <StyledInput type=\"text\" value={value} onChange={onInputChange} />\r\n      </label>\r\n   );\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledPreset = styled.div`\r\n   padding: 10px;\r\n\r\n   color: white;\r\n   background-color: ${({ theme }) => theme.secondary};\r\n\r\n   box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.1);\r\n   \r\n   transition: filter 0.5s ease;\r\n\r\n   &:active {\r\n      transition: filter 0s;\r\n      filter: brightness(1.2);\r\n   }\r\n`;\r\n\r\ntype PresetProps = {\r\n   label: string\r\n   gridSize: number\r\n   mineCount: number\r\n\r\n   onSelectPreset: (gridSize: number, mineCount: number) => void\r\n}\r\n\r\nexport function Preset({ label, gridSize, mineCount, onSelectPreset }: PresetProps) {\r\n   return (\r\n      <StyledPreset onClick={() => onSelectPreset(gridSize, mineCount)}>\r\n         <strong>\r\n            {label}\r\n         </strong><br />\r\n         <small>\r\n            {gridSize}x{gridSize}<br />\r\n            {mineCount} mines\r\n         </small>\r\n      </StyledPreset>\r\n   );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { LabeledNumericInput } from \"./labeledinput\";\r\nimport styled from \"styled-components\";\r\nimport { Preset } from \"./preset\";\r\n\r\nconst StyledSettings = styled.div`\r\n   grid-area: settings;\r\n\r\n   padding: 0 30px;\r\n`;\r\n\r\nconst SettingsGrid = styled.div<{ columns: number }>`\r\n   display: grid;\r\n   grid-template-columns: repeat(${props => props.columns}, 1fr);\r\n   gap: 10px;\r\n   margin: 10px 0;\r\n`;\r\n\r\nconst RestartButton = styled.button`\r\n   font-size: 1.2rem;\r\n   font-weight: 700;\r\n   width: 100%;\r\n`;\r\n\r\nexport type SettingsProps = {\r\n   gridSize: number\r\n   mineCount: number\r\n   onSettingsUpdate: (newGridSize: number, newMineCount: number) => void\r\n}\r\n\r\nexport function Settings(props: SettingsProps) {\r\n   const [gridSize, setGridSize] = useState(props.gridSize);\r\n   const [mineCount, setMineCount] = useState(props.mineCount);\r\n\r\n   const handleSelectPreset = (newGridSize: number, newMineCount: number) => {\r\n      setGridSize(newGridSize);\r\n      setMineCount(newMineCount);\r\n\r\n      props.onSettingsUpdate(newGridSize, newMineCount);\r\n   }\r\n\r\n   const handleSubmit = (e: React.SyntheticEvent) => {\r\n      e.preventDefault();\r\n\r\n      props.onSettingsUpdate(gridSize, mineCount);\r\n   }\r\n\r\n   return (\r\n      <StyledSettings>\r\n         <form onSubmit={handleSubmit}>\r\n            <SettingsGrid columns={2}>\r\n               <LabeledNumericInput label=\"Grid size\" value={gridSize} onChange={setGridSize} />\r\n               <LabeledNumericInput label=\"Mine count\" value={mineCount} onChange={setMineCount} />\r\n            </SettingsGrid>\r\n\r\n            <SettingsGrid columns={3}>\r\n               <Preset label=\"Easy\" gridSize={9} mineCount={10} onSelectPreset={handleSelectPreset} />\r\n               <Preset label=\"Medium\" gridSize={16} mineCount={40} onSelectPreset={handleSelectPreset} />\r\n               <Preset label=\"Hard\" gridSize={24} mineCount={99} onSelectPreset={handleSelectPreset} />\r\n            </SettingsGrid>\r\n\r\n            <RestartButton>Restart</RestartButton>\r\n         </form>\r\n      </StyledSettings >\r\n   );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledInfo = styled.div`\r\n   grid-area: info;\r\n   \r\n   padding: 0 30px;\r\n\r\n   @media screen and (min-width: 768px) {\r\n      overflow-y: auto;\r\n   }\r\n`;\r\n\r\nexport function Info() {\r\n   return (\r\n      <StyledInfo>\r\n         <details>\r\n            <summary>Rules</summary>\r\n            <p>The board contains a number of cells. Each cell can be either empty or a mine.</p>\r\n            <p>The goal of the game is to flag all the mines and reveal all the empty cells.</p>\r\n            <p>If you reveal a mine, it's game over!</p>\r\n            <p>Empty cells show the number of mines that reside in the 8 adjacent cells.</p>\r\n         </details>\r\n\r\n         <details>\r\n            <summary>Controls</summary>\r\n            <p><strong>Left click</strong> on an unrevealed cell to reveal it.</p>\r\n            <p><strong>Right click</strong> on an unrevealed cell to flag it as a mine.</p>\r\n            <p><strong>Hold middle mouse button</strong> over an revealed cell to highlight its neighbors.</p>\r\n\r\n            <p><strong>Tip #1:</strong> If you've placed enough flags near a revealed cell, you can left click on it to automatically reveal cells without flags.</p>\r\n            <p><strong>Tip #2:</strong> The first cell you click will never be a mine, so don't worry about where to click.</p>\r\n         </details>\r\n      </StyledInfo>\r\n   );\r\n}","import React from \"react\";\r\nimport \"src/util\";\r\nimport { useGame } from \"src/hooks/game\";\r\nimport { Board } from \"./board/board\";\r\nimport styled, { ThemeProvider, createGlobalStyle } from \"styled-components\";\r\nimport { lightTheme, darkTheme } from \"src/theme\";\r\nimport { useLocalStorage } from \"src/hooks/localstorage\";\r\nimport { Header } from \"./sidepanel/header\";\r\nimport { Status } from \"./sidepanel/status\";\r\nimport { Settings } from \"./sidepanel/settings/settings\";\r\nimport { Info } from \"./sidepanel/info\";\r\n\r\nconst GlobalStyle = createGlobalStyle`      \r\n   html, body {\r\n      margin: 0;\r\n      user-select: none;\r\n   }\r\n      \r\n   ::-moz-focus-inner {\r\n      border: 0;\r\n   }\r\n\r\n   * {\r\n      font-family: 'Montserrat', sans-serif;\r\n   }\r\n`;\r\n\r\nconst StyledApp = styled.div`\r\n   height: 100vh;\r\n   overflow: auto;\r\n   \r\n   display: grid;\r\n   grid-template-rows: 90px 330px 40px 210px 70px;\r\n   grid-template-areas:\r\n      \"header\"\r\n      \"board\"\r\n      \"status\"\r\n      \"settings\"\r\n      \"info\";\r\n\r\n   @media screen and (min-width: 768px) {\r\n      grid-template-columns: 360px auto;\r\n      grid-template-rows: 100px 80px 230px auto;\r\n      grid-template-areas:\r\n         \"header   board\"\r\n         \"status   board\"\r\n         \"settings board\"\r\n         \"info     board\";\r\n   }\r\n\r\n   color: ${({theme}) => theme.foreground};\r\n   background-color: ${({theme}) => theme.background};\r\n\r\n   transition: color 0.3s linear,\r\n               background-color 0.3s linear;\r\n\r\n   a {\r\n      color: ${({theme}) => theme.foreground};\r\n      transition: color 0.3s linear;\r\n   }\r\n   \r\n   input {\r\n      color: ${({theme}) => theme.foreground};\r\n      background-color: ${({theme}) => theme.background};\r\n\r\n      transition: color 0.3s linear,\r\n                  background-color 0.3s linear;\r\n   }\r\n`;\r\n\r\nexport function App() {\r\n   const {\r\n      gridSize,\r\n      mineCount,\r\n      board,\r\n      resetBoard,\r\n      tryRevealCell,\r\n      tryRevealUnflaggedNeighbors,\r\n      tryFlagCell,\r\n      highlightCells,\r\n      unhighlightCells,\r\n      getGameState,\r\n   } = useGame({ initSize: 9, initMineCount: 10 });\r\n\r\n   const handleSettingsUpdate = (newGridSize: number, newMineCount: number) => {\r\n      resetBoard(newGridSize, newMineCount);\r\n   }\r\n\r\n   const handleMouseUp = (e: React.MouseEvent) => {\r\n      if (e.button === 1) {\r\n         unhighlightCells();\r\n      }\r\n   }\r\n\r\n   const handleMiddleOver = (e: React.MouseEvent, i: number) => {\r\n      if (e.buttons === 4) {\r\n         highlightCells(i);\r\n      }\r\n   }\r\n\r\n   const handleRightClick = (e: React.MouseEvent, i: number) => {\r\n      e.preventDefault();\r\n      tryFlagCell(i);\r\n   }\r\n\r\n   const handleLeftClick = (i: number) => {\r\n      if (board.revealed[i]) {\r\n         tryRevealUnflaggedNeighbors(i);\r\n      } else {\r\n         tryRevealCell(i);\r\n      }\r\n   }\r\n\r\n   const preventScrolling = (e: React.MouseEvent) => {\r\n      if (e.buttons === 4) {\r\n         e.preventDefault();\r\n      }\r\n   }\r\n\r\n   const [useDarkTheme, setDarkTheme] = useLocalStorage('darkTheme', false);\r\n   const toggleDarkTheme = () => setDarkTheme(!useDarkTheme);\r\n\r\n   const theme = useDarkTheme ? darkTheme : lightTheme;\r\n\r\n   return (\r\n      <ThemeProvider theme={theme}>\r\n         <GlobalStyle theme={theme} />\r\n\r\n         <StyledApp onContextMenu={(e) => e.preventDefault()} onMouseUp={handleMouseUp} onMouseDown={preventScrolling}>\r\n\r\n            <Header onThemeToggle={toggleDarkTheme} />\r\n\r\n            <Status gameState={getGameState()} minesLeft={mineCount - board.flagged.countBy(Boolean)} />\r\n\r\n            <Settings gridSize={gridSize} mineCount={mineCount} onSettingsUpdate={handleSettingsUpdate} />\r\n\r\n            <Info />\r\n\r\n            <Board\r\n               gridSize={gridSize}\r\n               boardState={board}\r\n               onLeftClick={handleLeftClick}\r\n               onRightClick={handleRightClick}\r\n               onMiddleOver={handleMiddleOver}\r\n            />\r\n\r\n         </StyledApp>\r\n\r\n      </ThemeProvider>\r\n   );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport function useLocalStorage<T>(key: string, initValue: T): [T, (value: T) => void] {\r\n   let stored = localStorage.getItem(key);\r\n   \r\n   const [value, setValue] = useState(\r\n      stored ? JSON.parse(stored) : initValue\r\n   );\r\n   \r\n   useEffect(() => {\r\n      localStorage.setItem(key, JSON.stringify(value));\r\n   }, [key, value]);\r\n\r\n   return [value, setValue];\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { App } from \"src/components/app\";\r\n\r\nReactDOM.render(\r\n   <App />,\r\n   document.getElementById(\"root\")\r\n)"],"sourceRoot":""}