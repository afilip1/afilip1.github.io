{"version":3,"sources":["util.ts","hooks/game.ts","hooks/grid.ts","components/settings.tsx","components/cell.tsx","components/board.tsx","components/game.tsx","index.tsx"],"names":["Array","prototype","equals","other","this","length","every","element","index","shuffle","i","j","Math","floor","random","zip","map","e","withIndex","from","entries","countBy","predicate","filter","GameState","range","start","end","v","k","useGame","initSize","initMineCount","useState","gridSize","setGridSize","getNeighbors","useCallback","cellIndex","x","y","useGrid","mineCount","setMineCount","firstClick","setFirstClick","getInitState","size","mines","revealed","fill","flagged","adjacent","board","setBoard","populateBoard","firstClickedCell","splice","cell","n","getGameState","emptyCells","isMine","flaggedAllMines","Won","some","isRevealed","Lost","InProgress","handleCellClick","revealCascade","queue","forEach","center","shift","unrevealed","u","push","revealAllMines","neighbors","unflaggedNeighbors","revealUnflaggedNeighbors","nextBoard","revealCell","flagCell","slice","resetBoard","handleCellRightClick","event","preventDefault","GameStatus","status","gameState","minesLeft","Settings","props","onSubmit","onSettingsUpdate","name","type","value","onChange","currentTarget","onClick","onRestart","Cell","onRightClick","children","className","onContextMenu","CellHidden","isFlagged","CellRevealed","adjacentCount","countColors","undefined","style","color","Board","cellIds","rows","rowId","key","cellId","renderCell","Game","Boolean","newGridSize","newMineCount","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1fc7be30.chunk.js","sourcesContent":["/* eslint no-extend-native: [\"error\", { \"exceptions\": [\"Array\"]}] */\r\ndeclare global {\r\n   interface Array<T> {\r\n      equals(other: T[]): boolean\r\n      shuffle(): T[]\r\n      zip<U>(other: U[]): [T, U][]\r\n      withIndex(): [number, T][]\r\n      countBy(predicate: (value: T) => boolean): number\r\n   }\r\n}\r\n\r\n// unbelievable that I have to write this\r\nArray.prototype.equals = function <T>(this: T[], other: T[]) {\r\n   return (this.length === other.length) && this.every((element, index) => element === other[index]);\r\n}\r\n\r\nArray.prototype.shuffle = function <T>(this: T[]) {\r\n   for (let i = this.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [this[i], this[j]] = [this[j], this[i]];\r\n   }\r\n   return this;\r\n}\r\n\r\nArray.prototype.zip = function <T, U>(this: T[], other: U[]) {\r\n   return this.map((e, i) => [e, other[i]]);\r\n}\r\n\r\nArray.prototype.withIndex = function <T>(this: T[]) {\r\n   return Array.from(this.entries());\r\n}\r\n\r\nArray.prototype.countBy = function <T>(this: T[], predicate: (item: T) => boolean) {\r\n   return this.filter(predicate).length;\r\n}\r\n\r\nconst range = function (start: number, end: number) {\r\n   return Array.from({ length: end - start }, (v, k) => k + start);\r\n}\r\n\r\nexport { range };","import { useState, SyntheticEvent, useCallback } from \"react\";\r\nimport { useGrid } from \"./grid\"\r\n\r\nexport type BoardState = {\r\n   mines: boolean[],\r\n   revealed: boolean[],\r\n   flagged: boolean[],\r\n   adjacent: (number | null)[]\r\n};\r\n\r\nexport enum GameState {\r\n   InProgress,\r\n   Won,\r\n   Lost,\r\n}\r\n\r\ntype InitBoardParams = {\r\n   initSize: number,\r\n   initMineCount: number,\r\n};\r\n\r\nexport function useGame({ initSize, initMineCount }: InitBoardParams) {\r\n   const { gridSize, setGridSize, getNeighbors } = useGrid(initSize);\r\n\r\n   const [mineCount, setMineCount] = useState(initMineCount);\r\n\r\n   const [firstClick, setFirstClick] = useState<number | null>(null);\r\n\r\n   const getInitState = (size: number) => ({\r\n      mines: [],\r\n      revealed: Array(size * size).fill(false),\r\n      flagged: Array(size * size).fill(false),\r\n      adjacent: []\r\n   }) as BoardState;\r\n\r\n   const [board, setBoard] = useState(getInitState(gridSize));\r\n   const resetBoard = (size: number, mineCount: number) => {\r\n      setGridSize(size);\r\n      setMineCount(mineCount);\r\n      setBoard(getInitState(size));\r\n   }\r\n\r\n   const populateBoard = useCallback((firstClickedCell: number) => {\r\n      const mines = Array((gridSize * gridSize) - 1)\r\n         .fill(true, 0, mineCount)\r\n         .fill(false, mineCount)\r\n         .shuffle();\r\n\r\n      mines.splice(firstClickedCell, 0, false); // make sure first clicked cell is never a mine\r\n\r\n      const adjacent = mines.withIndex().map(([cell, mine]) =>\r\n         mine\r\n            ? null\r\n            : getNeighbors(cell).countBy((n) => mines[n])\r\n      );\r\n\r\n      setBoard({ ...board, mines, adjacent });\r\n   }, [board, gridSize, mineCount, getNeighbors]);\r\n\r\n   const getGameState = useCallback(() => {\r\n      const { mines, revealed, flagged } = board;\r\n\r\n      const emptyCells = mines.map(isMine => !isMine);\r\n      const flaggedAllMines = mines.equals(flagged);\r\n\r\n      if (revealed.equals(emptyCells) && flaggedAllMines) {\r\n         return GameState.Won;\r\n      }\r\n\r\n      const mineRevealed = revealed.zip(mines).some(([isRevealed, isMine]) => isRevealed && isMine)\r\n      if (mineRevealed) {\r\n         return GameState.Lost;\r\n      }\r\n\r\n      return GameState.InProgress;\r\n   }, [board]);\r\n\r\n   const handleCellClick = useCallback((cell: number) => {\r\n      if (getGameState() !== GameState.InProgress) return;\r\n\r\n      if (board.mines.length === 0) {\r\n         populateBoard(cell);\r\n         setFirstClick(cell);\r\n         return;\r\n      }\r\n\r\n      const revealAllMines = () => {\r\n         const revealed = board.revealed\r\n            .zip(board.mines)\r\n            .map(([isRevealed, isMine]) => isRevealed || isMine);\r\n\r\n         setBoard({ ...board, revealed });\r\n      }\r\n\r\n      const revealCascade = (...queue: number[]) => {\r\n         let { revealed } = board;\r\n\r\n         queue.forEach(cell => revealed[cell] = true);\r\n\r\n         while (queue.length > 0) {\r\n            const center = queue.shift() as number;\r\n\r\n            if (board.adjacent[center] === 0) {\r\n               const unrevealed = getNeighbors(center).filter(n => !revealed[n]);\r\n               unrevealed.forEach(u => revealed[u] = true);\r\n               queue.push(...unrevealed);\r\n            }\r\n         }\r\n\r\n         return { ...board, revealed };\r\n      }\r\n\r\n      const revealUnflaggedNeighbors = (cell: number) => {\r\n         const neighbors = getNeighbors(cell);\r\n\r\n         const adjacentFlags = neighbors.filter(n => board.flagged[n])\r\n         if (adjacentFlags.length !== board.adjacent[cell]) return;\r\n\r\n         const unflaggedNeighbors = neighbors.filter(n => !(board.revealed[n] || board.flagged[n]));\r\n\r\n         setBoard(revealCascade(...unflaggedNeighbors));\r\n      }\r\n\r\n      const revealCell = (cell: number) => {\r\n         let nextBoard = revealCascade(cell);\r\n         nextBoard.flagged[cell] = false;\r\n         setBoard(nextBoard);\r\n      }\r\n\r\n      if (board.flagged[cell]) return;\r\n\r\n      if (board.mines[cell]) {\r\n         revealAllMines();\r\n      } else if (board.revealed[cell]) {\r\n         revealUnflaggedNeighbors(cell);\r\n      } else {\r\n         revealCell(cell);\r\n      }\r\n   }, [board, getGameState, getNeighbors, populateBoard]);\r\n\r\n   if (firstClick) {\r\n      handleCellClick(firstClick);\r\n      setFirstClick(null);\r\n   }\r\n\r\n   const flagCell = (cell: number) => {\r\n      let flagged = board.flagged.slice();\r\n      flagged[cell] = !flagged[cell];\r\n      setBoard({ ...board, flagged });\r\n   }\r\n\r\n   const handleCellRightClick = (event: SyntheticEvent, cell: number) => {\r\n      event.preventDefault();\r\n      if (getGameState() !== GameState.InProgress) return;\r\n\r\n      flagCell(cell);\r\n   };\r\n\r\n   return {\r\n      gridSize,\r\n      mineCount,\r\n      setMineCount,\r\n      board,\r\n      resetBoard,\r\n      handleCellClick,\r\n      handleCellRightClick,\r\n      flagCell,\r\n      getGameState,\r\n   };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\n\r\nexport function useGrid(initSize: number) {\r\n   const [gridSize, setGridSize] = useState(initSize);\r\n\r\n   const getNeighbors: (cellIndex: number) => number[] =\r\n      useCallback((cellIndex) => {\r\n         const indexToCoords: (index: number) => [number, number] =\r\n            index => [index % gridSize, Math.floor(index / gridSize)];\r\n\r\n         const coordsToIndex: ([x, y]: [number, number]) => number =\r\n            ([x, y]) => y * gridSize + x;\r\n\r\n         const isInBounds = ([x, y]: [number, number]) =>\r\n            x >= 0 && x < gridSize && y >= 0 && y < gridSize;\r\n\r\n         const [x, y] = indexToCoords(cellIndex);\r\n         const neighbors: [number, number][] = [\r\n            [x - 1, y - 1], [x, y - 1], [x + 1, y - 1],\r\n            [x - 1, y], /* ~center point~ */[x + 1, y],\r\n            [x - 1, y + 1], [x, y + 1], [x + 1, y + 1],\r\n         ];\r\n\r\n         return neighbors\r\n            .filter(isInBounds)\r\n            .map(coordsToIndex);\r\n      }, [gridSize]);\r\n\r\n   return {\r\n      gridSize,\r\n      setGridSize,\r\n      getNeighbors\r\n   };\r\n}","import React, { useState, FormEvent } from \"react\";\r\nimport { GameState } from \"../hooks/game\"\r\n\r\ntype GameStatusProps = {\r\n   gameState: GameState,\r\n   minesLeft: number,\r\n}\r\n\r\nfunction GameStatus({ gameState, minesLeft }: GameStatusProps) {\r\n   let status;\r\n   switch (gameState) {\r\n      case GameState.InProgress:\r\n         status = \"Mines remaining: \" + minesLeft;\r\n         break;\r\n      case GameState.Won:\r\n         status = \"You win!\"\r\n         break;\r\n      case GameState.Lost:\r\n         status = \"You lose :(\"\r\n         break;\r\n   }\r\n\r\n   return <h1>{status}</h1>\r\n}\r\n\r\ntype SettingsProps = {\r\n   gridSize: number,\r\n   mineCount: number,\r\n   onSettingsUpdate: (gridSize: number, mineCount: number) => void\r\n   onRestart: () => void\r\n} & GameStatusProps;\r\n\r\nexport function Settings(props: SettingsProps) {\r\n   const [gridSize, setGridSize] = useState(props.gridSize);\r\n   const [mineCount, setMineCount] = useState(props.mineCount);\r\n\r\n   const handleGridSizeChange = (event: FormEvent<HTMLInputElement>) => {\r\n      setGridSize(+event.currentTarget.value);\r\n   };\r\n\r\n   const handleMineCountChange = (event: FormEvent<HTMLInputElement>) => {\r\n      setMineCount(+event.currentTarget.value);\r\n   }\r\n\r\n   const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n      event.preventDefault();\r\n      props.onSettingsUpdate(gridSize, mineCount);\r\n   }\r\n\r\n   return (\r\n      <div>\r\n         <form onSubmit={handleSubmit}>\r\n            <label>\r\n               Grid size:\r\n            <input name=\"gridSize\" type=\"text\" value={gridSize} onChange={handleGridSizeChange} />\r\n            </label>\r\n            <label>\r\n               Mine count:\r\n            <input name=\"mineCount\" type=\"text\" value={mineCount} onChange={handleMineCountChange} />\r\n            </label>\r\n            <button type=\"submit\">Apply</button>\r\n         </form>\r\n\r\n         <button onClick={props.onRestart}>Restart</button>\r\n\r\n         <GameStatus gameState={props.gameState} minesLeft={props.minesLeft} />\r\n      </div>\r\n   );\r\n}","import React, { ReactEventHandler, ReactNode } from \"react\";\r\n\r\ntype CellProps = {\r\n   isRevealed: boolean,\r\n   onClick: ReactEventHandler\r\n   onRightClick: ReactEventHandler\r\n   children: ReactNode\r\n};\r\n\r\nfunction Cell({ isRevealed, onClick, onRightClick, children }: CellProps) {\r\n   let className = \"cell\";\r\n   if (isRevealed) className += \" cell-revealed\";\r\n\r\n   return (\r\n      <button\r\n         className={className}\r\n         onClick={onClick}\r\n         onContextMenu={onRightClick}\r\n      >\r\n         {children}\r\n      </button>\r\n   );\r\n}\r\n\r\ntype CellHiddenProps = {\r\n   isFlagged: boolean,\r\n   onClick: ReactEventHandler,\r\n   onRightClick: ReactEventHandler,\r\n};\r\n\r\nfunction CellHidden({ isFlagged, onClick, onRightClick }: CellHiddenProps) {\r\n   return (\r\n      <Cell\r\n         isRevealed={false}\r\n         onClick={onClick}\r\n         onRightClick={onRightClick}\r\n      >\r\n         {isFlagged && \"🚩\"}\r\n      </Cell>\r\n   );\r\n}\r\n\r\ntype CellRevealedProps = {\r\n   isMine: boolean,\r\n   adjacentCount: number | null,\r\n   onClick: ReactEventHandler,\r\n};\r\n\r\nfunction CellRevealed({ isMine, adjacentCount, onClick }: CellRevealedProps) {\r\n   const countColors = [undefined, \"blue\", \"green\", \"red\", \"purple\", \"maroon\", \"turquoise\", \"black\", \"gray\"];\r\n\r\n   return (\r\n      <Cell\r\n         isRevealed={true}\r\n         onClick={onClick}\r\n         onRightClick={(e) => e.preventDefault()}\r\n      >\r\n         {isMine && \"💣\"}\r\n         {adjacentCount !== null && adjacentCount > 0 &&\r\n            <span style={{ color: countColors[adjacentCount] }}>{adjacentCount}</span>\r\n         }\r\n      </Cell>\r\n   );\r\n};\r\n\r\nexport { CellHidden, CellRevealed };","import React, { SyntheticEvent } from \"react\";\r\nimport { CellHidden, CellRevealed } from \"./cell\";\r\nimport { range } from \"../util\";\r\nimport { BoardState } from \"src/hooks/game\";\r\n\r\ntype RenderCellProps = {\r\n   board: BoardState,\r\n   onClick: (i: number) => void,\r\n   onRightClick: (e: SyntheticEvent, i: number) => void,\r\n};\r\n\r\nfunction renderCell(props: RenderCellProps, cellId: number) {\r\n   const {\r\n      board: { mines, flagged, revealed, adjacent },\r\n      onClick, onRightClick\r\n   } = props;\r\n\r\n   if (revealed[cellId]) {\r\n      return (\r\n         <CellRevealed\r\n            key={cellId}\r\n            isMine={mines[cellId]}\r\n            onClick={() => onClick(cellId)}\r\n            adjacentCount={adjacent[cellId]}\r\n         />\r\n      );\r\n   } else {\r\n      return (\r\n         <CellHidden\r\n            key={cellId}\r\n            isFlagged={flagged[cellId]}\r\n            onClick={() => onClick(cellId)}\r\n            onRightClick={(e) => onRightClick(e, cellId)}\r\n         />\r\n      );\r\n   }\r\n}\r\n\r\ntype BoardProps = { size: number } & RenderCellProps;\r\n\r\nexport function Board({ size, ...props }: BoardProps) {\r\n   let cellIds = range(0, size * size);\r\n   let rowIds = range(0, size);\r\n\r\n   let rows = rowIds.map(rowId =>\r\n      <div className=\"board-row\" key={rowId}>\r\n         {\r\n            cellIds\r\n               .slice(rowId * size, (rowId + 1) * size) // get cells in the row\r\n               .map(cellId => renderCell(props, cellId))\r\n         }\r\n      </div>\r\n   );\r\n\r\n   return <div className=\"board\">{rows}</div>;\r\n}","import React from \"react\";\r\nimport \"../util\"\r\nimport { Settings } from \"./settings\";\r\nimport { Board } from \"./board\";\r\nimport { useGame } from \"src/hooks/game\"\r\n\r\nexport function Game() {\r\n   const {\r\n      gridSize,\r\n      mineCount,\r\n      board,\r\n      resetBoard,\r\n      handleCellClick,\r\n      handleCellRightClick,\r\n      getGameState\r\n   } = useGame({ initSize: 9, initMineCount: 10 });\r\n\r\n   return (\r\n      <div className=\"game\" onContextMenu={(e) => e.preventDefault()}>\r\n         <Settings\r\n            gridSize={gridSize}\r\n            mineCount={mineCount}\r\n            gameState={getGameState()}\r\n            minesLeft={mineCount - board.flagged.countBy(Boolean)}\r\n            onSettingsUpdate={(newGridSize, newMineCount) => resetBoard(newGridSize, newMineCount)}\r\n            onRestart={() => resetBoard(gridSize, mineCount)}\r\n         />\r\n\r\n         <Board\r\n            size={gridSize}\r\n            board={board}\r\n            onClick={handleCellClick}\r\n            onRightClick={handleCellRightClick}\r\n         />\r\n      </div>\r\n   );\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport { Game } from \"./components/game\";\r\n\r\nReactDOM.render(\r\n   <Game />,\r\n   document.getElementById(\"root\")\r\n)"],"sourceRoot":""}