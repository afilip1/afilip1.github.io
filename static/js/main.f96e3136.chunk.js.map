{"version":3,"sources":["util.ts","components/common/labeledinput.tsx","hooks/observable.ts","components/sidepanel/settings.tsx","hooks/game.ts","hooks/grid.ts","components/sidepanel/status.tsx","components/common/collapsiblepanel.tsx","components/sidepanel/info.tsx","components/sidepanel/sidepanel.tsx","hooks/localstorage.ts","components/common/squaregrid.tsx","components/board/revealedcell.tsx","components/board/hiddencell.tsx","components/board/cell.tsx","components/board/board.tsx","components/game.tsx","index.tsx"],"names":["Array","prototype","equals","other","this","length","every","element","index","shuffle","i","j","Math","floor","random","zip","map","e","withIndex","from","entries","countBy","predicate","filter","LabeledNumberInput","label","value","onChange","type","currentTarget","useObservable","initState","useState","setValue","newValue","Settings","props","settingsChanged","setSettingsChanged","onSettingsChanged","gridSize","setGridSize","mineCount","setMineCount","onSubmit","event","preventDefault","onSettingsUpdate","autoComplete","GameState","useGame","initSize","initMineCount","getNeighbors","useCallback","cellIndex","x","y","useGrid","firstClick","setFirstClick","mines","setMines","adjacent","setAdjacent","fill","revealed","setRevealed","flagged","setFlagged","dimmed","setDimmed","lastRevealed","setLastRevealed","populateBoard","firstClickedCell","splice","cell","n","getGameState","emptyCells","isMine","flaggedAllMines","Won","some","isRevealed","Lost","InProgress","revealCascade","nextRevealed","slice","queue","forEach","center","shift","highlighted","concat","nextDimmed","h","unrevealed","u","push","tryRevealCell","revealAllMines","nextFlagged","revealCell","board","resetBoard","size","tryFlagCell","tryRevealUnflaggedNeighbors","neighbors","unflaggedNeighbors","highlightCells","unhighlightCells","Status","status","gameState","minesLeft","CollapsiblePanel","collapsed","setCollapsed","className","style","display","title","onClick","children","Info","SidePanel","settingsProps","href","useLocalStorage","key","initValue","localStorage","getItem","useEffect","setItem","useLocalStorageNumber","toString","strValue","setStrValue","SquareGrid","cellSize","gridStyle","gridTemplateColumns","gridAutoRows","RevealedCell","isLastRevealed","adjacentCount","onLeftClick","onMiddleOver","onMouseEnter","onMouseDown","HiddenCell","isFlagged","onRightClick","onContextMenu","renderCell","id","handlers","isDimmed","Cell","renderRevealedCell","renderHiddenCell","Board","start","end","boardState","cells","v","k","Game","cachedSize","setCachedSize","cachedMineCount","setCachedMineCount","onMouseUp","button","Boolean","newGridSize","newMineCount","buttons","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f96e3136.chunk.js","sourcesContent":["/* eslint no-extend-native: [\"error\", { \"exceptions\": [\"Array\"]}] */\r\ndeclare global {\r\n   interface Array<T> {\r\n      equals(other: T[]): boolean\r\n      shuffle(): T[]\r\n      zip<U>(other: U[]): [T, U][]\r\n      withIndex(): [number, T][]\r\n      countBy(predicate: (value: T) => boolean): number\r\n   }\r\n}\r\n\r\n// unbelievable that I have to write this\r\nArray.prototype.equals = function <T>(this: T[], other: T[]) {\r\n   return (this.length === other.length) && this.every((element, index) => element === other[index]);\r\n}\r\n\r\nArray.prototype.shuffle = function <T>(this: T[]) {\r\n   for (let i = this.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [this[i], this[j]] = [this[j], this[i]];\r\n   }\r\n   return this;\r\n}\r\n\r\nArray.prototype.zip = function <T, U>(this: T[], other: U[]) {\r\n   return this.map((e, i) => [e, other[i]]);\r\n}\r\n\r\nArray.prototype.withIndex = function <T>(this: T[]) {\r\n   return Array.from(this.entries());\r\n}\r\n\r\nArray.prototype.countBy = function <T>(this: T[], predicate: (item: T) => boolean) {\r\n   return this.filter(predicate).length;\r\n}\r\n\r\nconst range = function (start: number, end: number) {\r\n   return Array.from({ length: end - start }, (v, k) => k + start);\r\n}\r\n\r\nexport { range };","import React from \"react\";\r\n\r\ntype LabeledTextInputProps = {\r\n   label: string\r\n   value: string\r\n   onChange: (value: string) => void\r\n}\r\n\r\nexport function LabeledTextInput({ label, value, onChange }: LabeledTextInputProps) {\r\n   const onInputChange = (e: React.FormEvent<HTMLInputElement>) =>\r\n      onChange(e.currentTarget.value);\r\n\r\n   return (\r\n      <label>\r\n         {label}\r\n         <input type=\"text\" value={value} onChange={onInputChange} />\r\n      </label>\r\n   );\r\n}\r\n\r\ntype LabeledNumberInputProps = {\r\n   label: string\r\n   value: number\r\n   onChange: (value: number) => void\r\n}\r\n\r\nexport function LabeledNumberInput({ label, value, onChange }: LabeledNumberInputProps) {\r\n   const onInputChange = (e: React.FormEvent<HTMLInputElement>) =>\r\n      onChange(+e.currentTarget.value);\r\n\r\n   return (\r\n      <label>\r\n         {label}\r\n         <input type=\"number\" value={value} onChange={onInputChange} />\r\n      </label>\r\n   );\r\n}","import { useState } from \"react\";\r\n\r\nexport function useObservable<T>(initState: T, onChange: (newValue: T) => void): [T, (newValue: T) => void] {\r\n   const [value, setValue] = useState(initState);\r\n\r\n   const setValueNotify = (newValue: T) => {\r\n      setValue(newValue);\r\n      onChange(newValue);\r\n   }\r\n\r\n   return [value, setValueNotify]\r\n}","import React, { useState } from \"react\";\r\nimport { LabeledNumberInput as LabeledNumericInput } from \"../common/labeledinput\";\r\nimport { useObservable } from \"src/hooks/observable\";\r\n\r\nexport type SettingsProps = {\r\n   gridSize: number\r\n   mineCount: number\r\n   onSettingsUpdate: (newGridSize: number, newMineCount: number) => void\r\n}\r\n\r\nexport function Settings(props: SettingsProps) {\r\n   const [settingsChanged, setSettingsChanged] = useState(false);\r\n   const onSettingsChanged = () => setSettingsChanged(true);\r\n\r\n   const [gridSize, setGridSize] = useObservable(props.gridSize, onSettingsChanged);\r\n   const [mineCount, setMineCount] = useObservable(props.mineCount, onSettingsChanged);\r\n\r\n   const handleSubmit = (event: React.FormEvent) => {\r\n      event.preventDefault();\r\n      props.onSettingsUpdate(gridSize, mineCount);\r\n      setSettingsChanged(false);\r\n   }\r\n\r\n   return (\r\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n         <LabeledNumericInput label=\"Grid size\" value={gridSize} onChange={setGridSize} />\r\n         <LabeledNumericInput label=\"Mine count\" value={mineCount} onChange={setMineCount} />\r\n\r\n         <button type=\"submit\">\r\n            {settingsChanged ? \"Apply and restart\" : \"Restart\"}\r\n         </button>\r\n      </form>\r\n   );\r\n}","import { useState, useCallback } from \"react\";\r\nimport { useGrid } from \"src/hooks/grid\"\r\n\r\nexport type BoardState = {\r\n   mines: boolean[]\r\n   revealed: boolean[]\r\n   flagged: boolean[]\r\n   adjacent: (number | null)[]\r\n   dimmed: boolean[]\r\n   lastRevealed: number | null\r\n}\r\n\r\nexport enum GameState {\r\n   InProgress,\r\n   Won,\r\n   Lost,\r\n}\r\n\r\ntype InitBoardParams = {\r\n   initSize: number,\r\n   initMineCount: number,\r\n};\r\n\r\nexport function useGame({ initSize, initMineCount }: InitBoardParams) {\r\n   const { gridSize, setGridSize, getNeighbors } = useGrid(initSize);\r\n\r\n   const [mineCount, setMineCount] = useState(initMineCount);\r\n\r\n   const [firstClick, setFirstClick] = useState<number | null>(null);\r\n\r\n   const [mines, setMines] = useState<boolean[]>([]);\r\n   const [adjacent, setAdjacent] = useState<(number | null)[]>([]);\r\n   const [revealed, setRevealed] = useState(Array(gridSize * gridSize).fill(false));\r\n   const [flagged, setFlagged] = useState(Array(gridSize * gridSize).fill(false));\r\n   const [dimmed, setDimmed] = useState(Array(gridSize * gridSize).fill(false));\r\n   const [lastRevealed, setLastRevealed] = useState<number | null>(null);\r\n\r\n   const resetBoard = (size: number, mineCount: number) => {\r\n      setGridSize(size);\r\n      setMineCount(mineCount);\r\n\r\n      setMines([]);\r\n      setAdjacent([]);\r\n      setRevealed(Array(size * size).fill(false));\r\n      setFlagged(Array(size * size).fill(false));\r\n      setDimmed(Array(size * size).fill(false));\r\n      setLastRevealed(null);\r\n   }\r\n\r\n   const populateBoard = useCallback((firstClickedCell: number) => {\r\n      const mines = Array((gridSize * gridSize) - 1)\r\n         .fill(true, 0, mineCount)\r\n         .fill(false, mineCount)\r\n         .shuffle();\r\n\r\n      mines.splice(firstClickedCell, 0, false); // make sure first clicked cell is never a mine\r\n\r\n      const adjacent = mines.withIndex().map(([cell, mine]) =>\r\n         mine\r\n            ? null\r\n            : getNeighbors(cell).countBy((n) => mines[n])\r\n      );\r\n\r\n      setMines(mines);\r\n      setAdjacent(adjacent);\r\n   }, [gridSize, mineCount, getNeighbors]);\r\n\r\n   const getGameState = useCallback(() => {\r\n      const emptyCells = mines.map(isMine => !isMine);\r\n      const flaggedAllMines = mines.equals(flagged);\r\n\r\n      if (revealed.equals(emptyCells) && flaggedAllMines) {\r\n         return GameState.Won;\r\n      }\r\n\r\n      const mineRevealed = revealed.zip(mines).some(([isRevealed, isMine]) => isRevealed && isMine)\r\n      if (mineRevealed) {\r\n         return GameState.Lost;\r\n      }\r\n\r\n      return GameState.InProgress;\r\n   }, [mines, flagged, revealed]);\r\n\r\n   const revealCascade = useCallback((...queue: number[]) => {\r\n      let nextRevealed = revealed.slice()\r\n      queue.forEach(cell => nextRevealed[cell] = true);\r\n\r\n      while (queue.length > 0) {\r\n         const center = queue.shift() as number;\r\n\r\n         if (mines[center]) {\r\n            nextRevealed[center] = true;\r\n\r\n            const highlighted = getNeighbors(center).concat(center);\r\n\r\n            let nextDimmed = Array(gridSize * gridSize).fill(true);\r\n            highlighted.forEach(h => nextDimmed[h] = false);\r\n\r\n            setDimmed(nextDimmed);\r\n         }\r\n\r\n         if (adjacent[center] === 0) {\r\n            const unrevealed = getNeighbors(center).filter(n => !nextRevealed[n]);\r\n            unrevealed.forEach(u => nextRevealed[u] = true);\r\n            queue.push(...unrevealed);\r\n         }\r\n      }\r\n\r\n      return nextRevealed;\r\n   }, [adjacent, getNeighbors, gridSize, mines, revealed]);\r\n\r\n   const tryRevealCell = useCallback((cell: number) => {\r\n      if (getGameState() !== GameState.InProgress) return;\r\n\r\n      if (mines.length === 0) {\r\n         populateBoard(cell);\r\n         setFirstClick(cell);\r\n         return;\r\n      }\r\n\r\n      const revealAllMines = (cell: number) => {\r\n         const nextRevealed = revealed\r\n            .zip(mines)\r\n            .map(([isRevealed, isMine]) => isRevealed || isMine);\r\n\r\n         setRevealed(nextRevealed);\r\n\r\n         const highlighted = getNeighbors(cell).concat(cell);\r\n\r\n         let nextDimmed = Array(gridSize * gridSize).fill(true);\r\n         highlighted.forEach(h => nextDimmed[h] = false);\r\n\r\n         setDimmed(nextDimmed);\r\n      }\r\n\r\n      const revealCell = (cell: number) => {\r\n         const nextRevealed = revealCascade(cell);\r\n         const nextFlagged = flagged.slice();\r\n\r\n         nextFlagged[cell] = false;\r\n\r\n         setRevealed(nextRevealed);\r\n         setFlagged(nextFlagged);\r\n      }\r\n\r\n      if (flagged[cell]) return;\r\n\r\n      if (mines[cell]) {\r\n         revealAllMines(cell);\r\n      } else {\r\n         revealCell(cell);\r\n      }\r\n\r\n      setLastRevealed(cell);\r\n   }, [gridSize, mines, revealed, flagged, getGameState, getNeighbors, populateBoard, revealCascade]);\r\n\r\n   const tryRevealUnflaggedNeighbors = (cell: number) => {\r\n      const neighbors = getNeighbors(cell);\r\n\r\n      const adjacentFlags = neighbors.filter(n => flagged[n])\r\n      if (adjacentFlags.length !== adjacent[cell]) return;\r\n\r\n      const unflaggedNeighbors = neighbors.filter(n => !(revealed[n] || flagged[n]));\r\n\r\n      setRevealed(revealCascade(...unflaggedNeighbors));\r\n   }\r\n\r\n   if (firstClick) {\r\n      tryRevealCell(firstClick);\r\n      setFirstClick(null);\r\n   }\r\n\r\n   const tryFlagCell = (cell: number) => {\r\n      if (getGameState() !== GameState.InProgress) return;\r\n\r\n      let nextFlagged = flagged.slice();\r\n      nextFlagged[cell] = !nextFlagged[cell];\r\n\r\n      setFlagged(nextFlagged);\r\n   }\r\n\r\n   const highlightCells = (cell: number) => {\r\n      const highlighted = getNeighbors(cell).concat(cell);\r\n\r\n      let nextDimmed = Array(gridSize * gridSize).fill(true);\r\n      highlighted.forEach(h => nextDimmed[h] = false);\r\n\r\n      setDimmed(nextDimmed);\r\n   }\r\n\r\n   const unhighlightCells = () => {\r\n      setDimmed(Array(gridSize * gridSize).fill(false));\r\n   }\r\n\r\n   return {\r\n      gridSize,\r\n      mineCount,\r\n      setMineCount,\r\n      board: { mines, revealed, flagged, adjacent, dimmed, lastRevealed },\r\n      resetBoard,\r\n      tryRevealCell,\r\n      tryFlagCell,\r\n      tryRevealUnflaggedNeighbors,\r\n      highlightCells,\r\n      unhighlightCells,\r\n      getGameState,\r\n   };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\n\r\nexport function useGrid(initSize: number) {\r\n   const [gridSize, setGridSize] = useState(initSize);\r\n\r\n   const getNeighbors: (cellIndex: number) => number[] =\r\n      useCallback((cellIndex) => {\r\n         const indexToCoords: (index: number) => [number, number] =\r\n            index => [index % gridSize, Math.floor(index / gridSize)];\r\n\r\n         const coordsToIndex: ([x, y]: [number, number]) => number =\r\n            ([x, y]) => y * gridSize + x;\r\n\r\n         const isInBounds = ([x, y]: [number, number]) =>\r\n            x >= 0 && x < gridSize && y >= 0 && y < gridSize;\r\n\r\n         const [x, y] = indexToCoords(cellIndex);\r\n         const neighbors: [number, number][] = [\r\n            [x - 1, y - 1], [x, y - 1], [x + 1, y - 1],\r\n            [x - 1, y], /* ~center point~ */[x + 1, y],\r\n            [x - 1, y + 1], [x, y + 1], [x + 1, y + 1],\r\n         ];\r\n\r\n         return neighbors\r\n            .filter(isInBounds)\r\n            .map(coordsToIndex);\r\n      }, [gridSize]);\r\n\r\n   return {\r\n      gridSize,\r\n      setGridSize,\r\n      getNeighbors\r\n   };\r\n}","import React from \"react\";\r\nimport { GameState } from \"src/hooks/game\";\r\n\r\nexport type StatusProps = {\r\n   gameState: GameState\r\n   minesLeft: number\r\n}\r\n\r\nexport function Status({ gameState, minesLeft }: StatusProps) {\r\n   let status;\r\n   switch (gameState) {\r\n      case GameState.InProgress:\r\n         status = \"Flags left: \" + minesLeft;\r\n         break;\r\n      case GameState.Won:\r\n         status = \"You won!\"\r\n         break;\r\n      case GameState.Lost:\r\n         status = \"You lost :(\"\r\n         break;\r\n   }\r\n\r\n   return <h2>{status}</h2>;\r\n}\r\n","import React, { useState, ReactNode } from \"react\";\r\n\r\ntype CollapsablePanelProps = {\r\n   title: string\r\n   collapsed?: boolean\r\n   children: ReactNode\r\n}\r\n\r\nfunction CollapsiblePanel(props: CollapsablePanelProps) {\r\n   const [collapsed, setCollapsed] = useState(props.collapsed ?? true);\r\n\r\n   return (\r\n      <div className=\"collapsible\">\r\n         <h2 style={{ display: \"inline\" }}>\r\n            {props.title}\r\n         </h2>\r\n\r\n         <button onClick={() => setCollapsed(!collapsed)}>\r\n            {collapsed ? \"+\" : \"-\"}\r\n         </button>\r\n         \r\n         {!collapsed &&\r\n            props.children}\r\n      </div >\r\n   );\r\n}\r\n\r\nexport { CollapsiblePanel }","import React from \"react\";\r\nimport { CollapsiblePanel } from \"../common/collapsiblepanel\";\r\n\r\nexport function Info() {\r\n   return (\r\n      <>\r\n         <CollapsiblePanel title=\"Rules\">\r\n            <p>The board contains a number of cells. Each cell can be either empty or a mine.</p>\r\n            <p>The goal of the game is to flag all the mines and reveal all the empty cells.</p>\r\n            <p>If you reveal a mine, it's game over!</p>\r\n            <p>Empty cells show the number of mines that reside in the 8 adjacent cells.</p>\r\n         </CollapsiblePanel>\r\n\r\n         <CollapsiblePanel title=\"Controls\">\r\n            <p><strong>Left click</strong> on an unrevealed cell to reveal it.</p>\r\n            <p><strong>Right click</strong> on an unrevealed cell to flag it as a mine.</p>\r\n            <p><strong>Hold middle mouse button</strong> over an revealed cell to highlight its neighbors.</p>\r\n\r\n            <p><strong>Tip #1:</strong> If you've placed enough flags near a revealed cell, you can left click on it to automatically reveal cells without flags.</p>\r\n            <p><strong>Tip #2:</strong> The first cell you click will never be a mine, so don't worry about where to click.</p>\r\n         </CollapsiblePanel>\r\n      </>\r\n   );\r\n}","import React from \"react\";\r\nimport { Settings, SettingsProps } from \"./settings\";\r\nimport { StatusProps, Status } from \"./status\";\r\nimport { Info } from \"./info\";\r\nimport \"./sidepanel.css\";\r\n\r\ntype ControlPanelProps = SettingsProps & StatusProps\r\n\r\nexport function SidePanel({ gameState, minesLeft, ...settingsProps }: ControlPanelProps) {\r\n   return (\r\n      <div className=\"side-panel\">\r\n         <h1>MINEKONG</h1>\r\n         <small>inspired by <a href=\"https://store.steampowered.com/app/265890/Hexcells/\">Hexcells</a></small>\r\n\r\n         <Status gameState={gameState} minesLeft={minesLeft} />\r\n\r\n         <Settings {...settingsProps} />\r\n\r\n         <Info />\r\n      </div>\r\n   );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport function useLocalStorage(key: string, initValue: string = \"\"): [string, (value: string) => void] {\r\n   const [value, setValue] = useState(\r\n      localStorage.getItem(key) ?? initValue\r\n   );\r\n\r\n   useEffect(() => {\r\n      localStorage.setItem(key, value);\r\n   }, [key, value]);\r\n\r\n   return [value, setValue];\r\n}\r\n\r\nexport function useLocalStorageNumber(key: string, initValue: number = 0): [number, (value: number) => void] {\r\n   const [strValue, setStrValue] = useLocalStorage(key, initValue.toString());\r\n\r\n   const value = +strValue;\r\n   const setValue = (newValue: number) => setStrValue(newValue.toString());\r\n\r\n   return [value, setValue];\r\n}","import React, { ReactNode } from \"react\";\r\n\r\ntype SquareGridProps = { size: number, cellSize: string, children: ReactNode };\r\n\r\nexport function SquareGrid({ size, cellSize, children }: SquareGridProps) {\r\n   const gridStyle = {\r\n      gridTemplateColumns: `repeat(${size}, ${cellSize})`,\r\n      gridAutoRows: cellSize\r\n   };\r\n\r\n   return (\r\n      <div className=\"board-grid\" style={gridStyle}>\r\n         {children}\r\n      </div>\r\n   );\r\n}","import React from \"react\";\r\nimport { BoardState } from \"src/hooks/game\";\r\nimport { Handlers } from \"./cell\";\r\n\r\nexport function renderRevealedCell(id: number, board: BoardState, handlers: Handlers) {\r\n   const isMine = board.mines[id];\r\n   const adjacentCount = board.adjacent[id] as number;\r\n   const isLastRevealed = board.lastRevealed === id;\r\n\r\n   const onLeftClick = () => handlers.onLeftClick(id);\r\n   const onMiddleOver = (e: React.MouseEvent) => handlers.onMiddleOver(e, id);\r\n\r\n   return <RevealedCell {...{ isMine, isLastRevealed, adjacentCount, onLeftClick, onMiddleOver }} />;\r\n}\r\n\r\ntype RevealedCellProps = {\r\n   isMine: boolean\r\n   isLastRevealed: boolean\r\n   adjacentCount: number\r\n   onLeftClick: () => void\r\n   onMiddleOver: (e: React.MouseEvent) => void\r\n}\r\n\r\nfunction RevealedCell({ isMine, isLastRevealed, adjacentCount, onLeftClick, onMiddleOver }: RevealedCellProps) {\r\n   return (\r\n      <div\r\n         className=\"cell-inner cell-revealed\"\r\n         onClick={onLeftClick}\r\n         onMouseEnter={onMiddleOver}\r\n         onMouseDown={onMiddleOver}\r\n      >\r\n         {isMine\r\n            ? (isLastRevealed ? \"💥\" : \"💣\")\r\n            : (adjacentCount > 0 && adjacentCount)}\r\n      </div>\r\n   );\r\n}","import React from \"react\";\r\nimport { BoardState } from \"src/hooks/game\";\r\nimport { Handlers } from \"./cell\";\r\n\r\nexport function renderHiddenCell(id: number, board: BoardState, handlers: Handlers) {\r\n   const isFlagged = board.flagged[id];\r\n\r\n   const onLeftClick = () => handlers.onLeftClick(id);\r\n   const onRightClick = (e: React.MouseEvent) => handlers.onRightClick(e, id);\r\n\r\n   return <HiddenCell {...{ isFlagged, onLeftClick, onRightClick }} />\r\n}\r\n\r\ntype HiddenCellProps = {\r\n   isFlagged: boolean,\r\n   onLeftClick: () => void,\r\n   onRightClick: (e: React.MouseEvent) => void\r\n}\r\n\r\nfunction HiddenCell({ isFlagged, onLeftClick, onRightClick }: HiddenCellProps) {\r\n   let className = \"cell-inner cell-hidden\";\r\n   if (isFlagged) className += \" cell-flagged\";\r\n\r\n   return (\r\n      <div\r\n         className={className}\r\n         onClick={onLeftClick}\r\n         onContextMenu={onRightClick}\r\n      />\r\n   );\r\n}\r\n","import React, { ReactNode } from \"react\";\r\nimport { BoardState } from \"src/hooks/game\";\r\nimport { renderRevealedCell } from \"./revealedcell\";\r\nimport { renderHiddenCell } from \"./hiddencell\";\r\n\r\nexport type Handlers = {\r\n   onLeftClick: (i: number) => void\r\n   onRightClick: (e: React.MouseEvent, i: number) => void\r\n   onMiddleOver: (e: React.MouseEvent, i: number) => void\r\n}\r\n\r\nexport function renderCell(id: number, board: BoardState, handlers: Handlers) {\r\n   const isRevealed = board.revealed[id];\r\n   const isDimmed = board.dimmed[id];\r\n\r\n   return (\r\n      <Cell isDimmed={isDimmed} key={id}>\r\n         {isRevealed\r\n            ? renderRevealedCell(id, board, handlers)\r\n            : renderHiddenCell(id, board, handlers)}\r\n      </Cell>\r\n   );\r\n}\r\n\r\ntype CellProps = {\r\n   isDimmed: boolean,\r\n   children: ReactNode\r\n};\r\n\r\nfunction Cell({ isDimmed, children }: CellProps) {\r\n   let className = \"cell\";\r\n   if (isDimmed) className += \" cell-dimmed\";\r\n\r\n   return (\r\n      <div className={className}>\r\n         {children}\r\n      </div>\r\n   );\r\n}\r\n","import { BoardState } from \"src/hooks/game\";\r\nimport React from \"react\";\r\nimport { SquareGrid } from \"../common/squaregrid\";\r\nimport { renderCell } from \"./cell\";\r\nimport { range } from \"src/util\";\r\nimport \"./board.css\";\r\n\r\ntype BoardProps = {\r\n   gridSize: number\r\n   boardState: BoardState,\r\n   onLeftClick: (i: number) => void\r\n   onRightClick: (e: React.MouseEvent, i: number) => void\r\n   onMiddleOver: (e: React.MouseEvent, i: number) => void\r\n}\r\n\r\nexport function Board({ gridSize, boardState, ...handlers }: BoardProps) {\r\n   const cellIds = range(0, boardState.revealed.length);\r\n   const cells = cellIds.map(id => renderCell(id, boardState, handlers));\r\n\r\n   return (\r\n      <SquareGrid size={gridSize} cellSize=\"50px\">\r\n         {cells}\r\n      </SquareGrid>\r\n   );\r\n}","import React from \"react\";\r\nimport \"src/util\"\r\nimport { SidePanel } from \"src/components/sidepanel/sidepanel\";\r\nimport { useGame } from \"src/hooks/game\"\r\nimport { useLocalStorageNumber } from \"src/hooks/localstorage\";\r\nimport { Board } from \"./board/board\";\r\n\r\nexport function Game() {\r\n   const [cachedSize, setCachedSize] = useLocalStorageNumber('size', 9);\r\n   const [cachedMineCount, setCachedMineCount] = useLocalStorageNumber('mineCount', 10);\r\n\r\n   const {\r\n      gridSize,\r\n      mineCount,\r\n      board,\r\n      resetBoard,\r\n      tryRevealCell,\r\n      tryRevealUnflaggedNeighbors,\r\n      tryFlagCell,\r\n      highlightCells,\r\n      unhighlightCells,\r\n      getGameState,\r\n   } = useGame({ initSize: cachedSize, initMineCount: cachedMineCount });\r\n\r\n   const handleSettingsUpdate = (newGridSize: number, newMineCount: number) => {\r\n      setCachedSize(newGridSize);\r\n      setCachedMineCount(newMineCount);\r\n      resetBoard(newGridSize, newMineCount);\r\n   }\r\n\r\n   const handleMouseUp = (e: React.MouseEvent) => {\r\n      if (e.button === 1) {\r\n         unhighlightCells();\r\n      }\r\n   }\r\n\r\n   const handleMiddleOver = (e: React.MouseEvent, i: number) => {\r\n      if (e.buttons === 4) {\r\n         highlightCells(i);\r\n      }\r\n   }\r\n\r\n   const handleRightClick = (e: React.MouseEvent, i: number) => {\r\n      e.preventDefault();\r\n      tryFlagCell(i);\r\n   }\r\n\r\n   const handleLeftClick = (i: number) => {\r\n      if (board.revealed[i]) {\r\n         tryRevealUnflaggedNeighbors(i);\r\n      } else {\r\n         tryRevealCell(i);\r\n      }\r\n   }\r\n\r\n   return (\r\n      <div className=\"game\" onContextMenu={(e) => e.preventDefault()} onMouseUp={handleMouseUp}>\r\n         <SidePanel\r\n            gridSize={gridSize}\r\n            mineCount={mineCount}\r\n            gameState={getGameState()}\r\n            minesLeft={mineCount - board.flagged.countBy(Boolean)}\r\n            onSettingsUpdate={handleSettingsUpdate}\r\n         />\r\n\r\n         <Board\r\n            gridSize={gridSize}\r\n            boardState={board}\r\n            onLeftClick={handleLeftClick}\r\n            onRightClick={handleRightClick}\r\n            onMiddleOver={handleMiddleOver}\r\n         />\r\n      </div>\r\n   );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"src/index.css\";\r\n\r\nimport { Game } from \"src/components/game\";\r\n\r\nfunction Root() {\r\n   return <Game />;\r\n}\r\n\r\nReactDOM.render(\r\n   <Root />,\r\n   document.getElementById(\"root\")\r\n)"],"sourceRoot":""}